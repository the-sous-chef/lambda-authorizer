service: auth0-custom-authorizer

useDotenv: true
variablesResolutionMode: 20210326

package:
  individually: true

plugins:
  - serverless-localstack

build:
  esbuild:
    bundle: true
    minify: false
    external:
      - "@aws-sdk/client-s3"
    exclude:
      - "@aws-sdk/*"
      - "!@aws-sdk/client-bedrock-runtime"
    packages: external
    buildConcurrency: 3
    sourcemap:
      type: linked
      setNodeOptions: true

custom:
  endpointType: REGIONAL
  region: ${opt:region, 'us-east-1'}
  stage: ${opt:stage, env:NODE_ENV, 'development'}
  localstack:
    edgePort: 4566
    host: ${env:LOCALSTACK_HOSTNAME, 'https://localhost'}
    stages:
      - development
  logRetentionInDays:
    development: 7
    production: 30
  memorySize:
    development: 128
    production: 128
  provisionedConcurrency:
    development: 1
    production:
  timeout:
    development: 900
    production: 6

provider:
  name: aws
  endpointType: ${self:custom.endpointType, 'REGIONAL'}
  lambdaHashingVersion: 20201221
  logRetentionInDays: ${self:custom.logRetentionInDays.${self:custom.stage}}
  memorySize: ${self:custom.memorySize.${self:custom.stage}}
  profile: "souschef"
  region: ${self:custom.region}
  runtime: nodejs14.x
  stage: ${self:custom.stage}
  timeout: ${self:custom.timeout.${self:custom.stage}}
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1"
  iam:
    role:
      managedPolicies:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
  logs:
    # Optional Configuration of Lambda Logging Configuration
    lambda:
      # The Log Format to be used for all lambda functions (default: Text)
      logFormat: JSON
      # The Application Log Level to be used, This can only be set if `logFormat` is set to `JSON`      
      applicationLogLevel: ERROR
      # The System Log Level to be used, This can only be set if `logFormat` is set to `JSON`      
      systemLogLevel: INFO
      # The LogGroup that will be used by default. If this is set the Framework will not create LogGroups for any functions
      logGroup: /aws/lambda/${self:custom.stage}/lambda-authorizer
    httpApi: true
    restApi: true
  tags:
    service: ${self:service}
    stage: ${self:custom.stage}
  tracing:
    apiGateway: true
    lambda: true
  vpc:
    securityGroupIds:
      - sg-0231973009b21b8e9
    subnetIds:
      - subnet-0a5c738bc43fbb1d7
      - subnet-02c70bb2c910e23c7
      - subnet-0e3947b76b5712e13

functions:
  authorize:
    handler: src/handler.main
    description: Receives a token and validates it against Auth0 IAM provider
    name: ${self:custom.stage}-authorize
    provisionedConcurrency: ${self:custom.provisionedConcurrency.${self:custom.stage}}
    environment:
      AUTH0_CLIENT_ID: ${env:AUTH0_CLIENT_ID}
      AUTH0_CLIENT_PUBLIC_KEY: ${env:AUTH0_CLIENT_PUBLIC_KEY}
      AUTH0_DOMAIN: ${env:AUTH0_DOMAIN}
    tags:
      service: ${self:service}
      stage: ${self:custom.stage}

resources:
  Resources:
    # This response is needed for custom authorizer failures cors support ¯\_(ツ)_/¯
    GatewayResponse:
      Type: "AWS::ApiGateway::GatewayResponse"
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: EXPIRED_TOKEN
        RestApiId:
          Ref: "ApiGatewayRestApi"
        StatusCode: "401"
    AuthFailureGatewayResponse:
      Type: "AWS::ApiGateway::GatewayResponse"
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: UNAUTHORIZED
        RestApiId:
          Ref: "ApiGatewayRestApi"
        StatusCode: "401"
